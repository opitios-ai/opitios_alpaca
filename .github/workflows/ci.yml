name: Fast CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 8  # 硬性超时限制
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies (fast)
      run: |
        python -m pip install --upgrade pip
        # 安装核心依赖（带依赖解析）
        pip install pytest-cov pytest-html pytest-json-report plotly flake8
        # 安装项目依赖（带依赖解析）
        pip install -r requirements.txt
    
    - name: Create test secrets file
      run: |
        cat > secrets.yml << EOF
        alpaca:
          api_key: "test_key"
          secret_key: "test_secret"
          paper_trading: true
        jwt:
          secret: "test_jwt_secret"
        redis:
          url: "redis://localhost:6379"
        EOF
    
    - name: Critical linting (30s max)
      timeout-minutes: 5
      run: |
        echo "Running critical linting..."
        flake8 app/ tests/ --select=E9,F63,F7,F82 --statistics
    
    - name: Fast unit tests (2min max)
      timeout-minutes: 3
      run: |
        echo "Running core unit tests with fast settings..."
        python -m pytest tests/unit/test_middleware.py tests/unit/test_alpaca_client.py -v \
          --tb=short \
          --maxfail=3 \
          --disable-warnings \
          --cov=app \
          --cov-report=xml \
          --cov-report=term-missing \
          -x
    
    - name: Fast security tests (1min max)
      timeout-minutes: 2
      run: |
        echo "Running core security tests with fast settings..."
        python -m pytest tests/unit/test_middleware.py::TestRateLimiter -v \
          --tb=short \
          --maxfail=2 \
          --disable-warnings \
          --cov=app --cov-append \
          --cov-report=xml \
          -x
    
    - name: Quick coverage check
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = float(root.attrib['line-rate']) * 100
            print(f'✅ Coverage: {coverage:.1f}%')
        except:
            print('✅ Coverage check skipped')
        "
    
    - name: Upload results (if needed)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: coverage.xml
        retention-days: 1
    
    - name: Success notification
      if: success()
      run: |
        echo "🎉 All tests passed in under 5 minutes!"
        echo "✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅"
